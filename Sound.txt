clc; clear; close all;

% Step 1: Load the User-Provided Audio File
[file, path] = uigetfile('*.wav', 'Select an Audio File'); % Open file selection dialog
if isequal(file, 0)
    disp('No file selected! Exiting...');
    return;
end
[mixed_audio, fs] = audioread(fullfile(path, file));
mixed_audio = mean(mixed_audio, 2); % Convert stereo to mono
sound(mixed_audio, fs);
disp('Playing original audio...');

% Step 2: Compute Spectrogram for Frequency Analysis
window_size = 1024;
overlap = round(0.75 * window_size);
nfft = 2048;

[S, F, T] = spectrogram(mixed_audio, window_size, overlap, nfft, fs);
spectral_energy = sum(abs(S), 2); % Sum of magnitudes per frequency bin

% Step 3: Find Dominant Frequency Range
[~, peak_idx] = max(spectral_energy); % Get frequency index with highest energy
peak_freq = F(peak_idx); % Convert index to frequency

% Define dynamic band-pass range (Â±30% around peak frequency)
fc_low = max(20, peak_freq * 0.7);
fc_high = min(fs/2, peak_freq * 1.3);

fprintf('Detected dominant frequency range: %.2f Hz - %.2f Hz\n', fc_low, fc_high);

% Step 4: Apply Adaptive Band-Pass Filtering
[b, a] = butter(4, [fc_low fc_high] / (fs/2), 'bandpass');
filtered_audio = filtfilt(b, a, mixed_audio);
sound(filtered_audio, fs);
audiowrite('adaptive_bandpass.wav', filtered_audio, fs);
disp('Band-pass filtering completed.');

% Step 5: Apply Wiener Filtering for Noise Reduction
denoised_audio = wiener2(filtered_audio, [5 5]);
sound(denoised_audio, fs);
audiowrite('adaptive_wiener_filtered.wav', denoised_audio, fs);
disp('Wiener filtering completed.');

% Step 6: Apply Spectral Subtraction for Additional Noise Reduction
noise_estimate = mean(abs(S(:, 1:10)), 2); % Estimate noise from the first few frames
S_denoised = max(abs(S) - noise_estimate, 0); % Subtract noise profile
separated_audio = istft(S_denoised .* exp(1j*angle(S)), fs, 'Window', hamming(window_size), 'OverlapLength', overlap, 'FFTLength', nfft);

% Normalize and Save the Final Separated Audio
separated_audio = separated_audio / max(abs(separated_audio));
sound(separated_audio, fs);
audiowrite('final_separated_audio.wav', separated_audio, fs);
disp('Final separation and noise reduction completed.');
